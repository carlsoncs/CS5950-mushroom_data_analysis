ls()
source('data_setup.R')
data('iris')
library('randomForest')
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
print(iris.rf)
> iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
> iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
fold.rf <- randomForest(edibility ~ . -11, data=folds[[i]], mtry=3, ntree=250, importance=TRUE, proximity=TRUE)
i=1
fold.rf <- randomForest(edibility ~ . -11, data=folds[[i]], mtry=3, ntree=250, importance=TRUE, proximity=TRUE)
fold.rf <- randomForest(edibility ~ ., data=folds[[1]], mtry=3, ntree=250, importance=TRUE, proximity=TRUE)
print fold.rf
print(fold.rf)
source('random_forest.R', print.eval=T)
source('random_forest.R', print.eval=T)
source('random_forest.R', print.eval=T)
print(fold.rf)
print(fold.rf)
source('random_forest.R', print.eval=T)
print(fold.rf)
source('random_forest.R', print.eval=T)
iris[,1:4]
folds[[1]][1:4]
folds[[1]][,2:23]
source('random_forest.R', print.eval=T)
source('random_forest.R', print.eval=T)
q()
source('classification_tree.R', print.eval=t)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
install.packages('plyr')
source('classification_tree.R', print.eval=T)
source('data_setup.R')
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
?[
?'['
source('classification_tree.R', print.eval=T)
train[[1]]
train[[2]]
train[[9]]
train[[8]]
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
names(indi)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
source('classification_tree.R', print.eval=T)
indi
summary(indi)
source('classification_tree.R', print.eval=T)
indi
summary(indi)
source('classification_tree.R', print.eval=T)
indi
summary(indi)
Q()
q)(
q()
source('classification_tree.R')
source('classification_tree.R')
source('classification_tree.R')
source('data_setup.R')
folds
confusion_matrix_averages
conf_mats
confusion_matrix_averages
q()
source('data_setup.R')
source('data_setup.R')
source('classification_tree.R')
source('random_forest.R')
q()
ls()
rm(list=ls())
ls()
source('Functions.R')
load_data(NULL)
subset_flds(folds)
subset_flds(folds, 5)
grow_forest(train[[1]], test)
source('classification_tree.R')
source('Functions.R')
kfolds_tree(train, test)
conf_mats
str(conf_mats)
source('classification_tree.R')
source('classification_tree.R')
source('classification_tree.R')
source('classification_tree.R')
source('classification_tree.R')
source('Functions.R')
load_data()
load_data(NULL)
source('random_forest.R')
source('random_forest.R')
source('random_forest.R')
conf_mats
lapply(conf_mats, FUN=write_confusion_matrix, r_file="results/rf_results.txt")
source('random_forest.R')
final_confusion_matrix
source('Functions.R')
apply(simplify2array(conf_mats), c(1,2), round_mean, digits=1)
lapply(simplify2array(conf_mats), c(1,2), round_mean, digits=1)
lapply(simplify2array(conf_mats), round_mean, digits=1)
str(conf_mats)
simplify2array(conf_mats)
str(simplify2array(conf_mats))
confusion_matrix_averages
simplify2array(confusion_matrix_averages)
str(confusion_matrix_averages)
fits
str(fits$confusion)
str(fits)
names(fits$confusion)
names(fits[[1]]$confusion)
fits[[1]]
names(fits[[1]])
str(fits[[1]]$confusion)
conf<-fits[[1]]$confusion
conf
conf$e
names(conf)
conf
as.array(conf)
unlist(conf)
aconf=as.array(conf)
aconf[1,]
aconf[,1]
aconf[c(1,2),]
aconf[2,]
aconf[1,]
aconf[,2]
aconf[,3]
aconf[,c(1,2)]
p=aconf[,c(1,2)]
p
p
p[0,1]
str(p)
p$p
names(p)
p
p[1:2,]
p[1:2,1:2]
p[1]
p[2]
load_data()
load_data(NULL)
source('random_forest.R')
source('random_forest.R')
confusion_matrix_averages
lapply(simplify2array(conf_mats), c(1,2), round_mean, digits=1)
lapply(simplify2array(conf_mats), round_mean, digits=1)
apply(simplify2array(conf_mats), c(1,2), round_mean, digits=1)
str(conf_mats)
as.array(conf_mats)
simplify2array(conf_mats)
apply(as.array(conf_mats), c(1,2), round_mean, digits=1)
apply(conf_mats, c(1,2), round_mean, digits=1)
dim(conf_mats[[1]])
dim(conf_mats)
conf_mats
apply(simplify2array(conf_mats), c(1,2), mean)
load_data(NULL)
source('random_forest.R')
q()
